alias dv=dvc
defn dva dvc add
defn da dvc add

# Config
alias dvcg="dvc config"
alias dvcgct="dvc config cache.type"
alias dvcgctl="dvc config cache.type reflink,symlink,hardlink,copy"
alias dvcgg="dvc config --global"
alias dvcggct="dvc config --global cache.type"
alias dvcggctl="dvc config --global cache.type reflink,symlink,hardlink,copy"

# Checkout
defn dvco dvc checkout
defn dvcf dvc checkout -f
defn dvcof dvc checkout -f
defn dvcor dvc checkout -R
defn dvcr dvc checkout -R
defn dcrf dvc checkout -R -f
defn dvcrf dvc checkout -R -f
defn dvcorl dvc checkout --relink

# import-url
defn diu dvc import-url
defn diuf dvc import-url -f

# stage
defn dsa dvc stage add
defn dsar dvc stage --run
defn dsl dvc stage list

# repro
defn drep dvc repro

# Fetch
alias dvf="dvc fetch"

# Unprotect
alias dvup="dvc unprotect"

dvc_mv_to_git() {
    for path in "$@"; do
        path="${path%.dvc}"
        dvc_path="${path}.dvc"
        dvc checkout "$path"
        dvc unprotect "$path"
        git rm "$dvc_path"
        git add -f "$path"
    done
}
export -f dvc_mv_to_git
defn dv2g dvc_mv_to_git

# GC
alias dvgc="dvc gc"
alias dvgcw="dvc gc -w"
alias dvgcwf="dvc gc -w -f"
alias dvgcwn="dvc gc -w --dry -f"
alias dvgcwr="dvc gc -w --not-in-remote"
alias dvgcwrf="dvc gc -w --not-in-remote -f"
alias dvgcwrn="dvc gc -w --not-in-remote --dry -f"

# Diff
defn dvd dvc-diff
defn ddc dvc-diff -c
defn ddcu1 dvc-diff -c -U1
defn ddc1 dvc-diff -c -U1
defn ddc1r dvc-diff -c -U1 -r
defn ddcz dvc-diff -c -x '"gunzip -c"'
defn ddcc dvc-diff -c -R
defn ddcr dvc-diff -c -R
defn ddcrs dvc-diff -c -r
defn ddr dvc-diff -R
defn ddrr dvc-diff -r
defn ddrs dvc-diff -r
defn dvdc dvc-diff -c
defn dvdcr dvc-diff -cr
defn dvdr dvc-diff -R
defn dvdrr dvc-diff -r
defn dvdrs dvc-diff -r
defn dvdv dvc-diff -v
defn dvdh dvc-diff -R HEAD
defn dvdw dvc-diff -w
defn dvdwh dvc-diff -w -R HEAD
defn dvud dvc-diff

# ls
alias dvl="dvc ls"
alias dvlr="dvc ls -R"

alias dvm="dvc commit"
alias dvmv="dvc mv"
alias dvpl="dvc pull"
alias dvplr="dvc pull -r"
alias dvpr="dvc push -r"
alias dvps="dvc push"
alias dvr="dvc remote"
alias dvra="dvc remote add"
alias dra="dvc remote add"
alias dvrd="dvc remote default"
alias drd="dvc remote default"
alias dvrl="dvc remote list"
alias drl="dvc remote list"
alias dvrm="dvc remote modify"

alias dcas="dvc config core.autostage"
alias dcast="dvc config core.autostage true"

dvc_remote_get_url() {
    dvc remote list | grep "^$1" | awk '{print $2}' | perl -pe 's/s3:\//s3/'
}
export -f dvc_remote_get_url
defn dvrgu dvc_remote_get_url

dvc_remote_set_url() {
    if [ $# -ne 2 ]; then
        echo "Usage: $0 <remote> <url>" >&2
        return 1
    fi
    dvc remote modify "$1" url "$2"
}
export -f dvc_remote_set_url
defn dvrsu dvc_remote_set_url

dvc_remote_url() {
    if [ $# -eq 1 ]; then
        dvc_remote_get_url "$@"
    elif [ $# -eq 2 ]; then
        dvc_remote_set_url "$@"
    else
        echo "Usage: $0 <remote> [url]" >&2
        return 1
    fi
}
export -f dvc_remote_url
defn dvru dvc_remote_url

# Status
alias ds="dvc data status"
alias dss="dvc status"
alias dds="dvc data status"
alias dvs="dvc data status"
alias dsg="dvc data status --granular"
alias dvsg="dvc data status --granular"
alias dvpt="dvc status"

alias dvscj="dvc data status --json"
dvc_data_status_jq() {
    dvc data status --json | jq "$@"
}
export -f dvc_data_status_jq
defn dvscjq dvc_data_status_jq

alias dvsj="dvc data status --unchanged --json"
dvc_data_status_unchanged_jq() {
    dvc data status --unchanged --json | jq "$@"
}
export -f dvc_data_status_unchanged_jq
defn dvsjq dvc_data_status_unchanged_jq
alias dvsa="dvc data status --unchanged"
alias dvsu="dvc data status --unchanged"

dvc_relpath() {
    relpath="$(realpath "--relative-to=`dvc root`" .)"
    if [ "$relpath" = "." ]; then
        relpath=
    else
        relpath="$relpath/"
    fi
    echo "$relpath"
}
export -f dvc_relpath
defn drp dvc_relpath
defn dvrlp dvc_relpath

dvc_list_category() {
    if [ $# -eq 0 ]; then
        echo "Usage: dvc_list_category <unchanged|uncommitted.modified|uncommitted.deleted|...> [patterns...]" >&2
        return 1
    fi
    category="$1"; shift
    relpath="$(dvc_relpath)"
    dvc data status --unchanged --json | \
    jq -r "(.$category // [])[]" | \
    grep "^$relpath" | \
    sed "s|^$relpath||" | \
    sort | \
    if [ $# -gt 0 ]; then
        while read -r line; do
            for pattern in "$@"; do
                if [[ $line == $pattern ]]; then
                    echo "$line"
                    break
                fi
            done
        done
    else
        cat
    fi
}
export -f dvc_list_category
defn dla dvc_list_category committed.added
defn dvla dvc_list_category committed.added
defn dlu dvc_list_category unchanged
defn dvlu dvc_list_category unchanged
defn dld dvc_list_category uncommitted.deleted
defn dvld dvc_list_category uncommitted.deleted
defn dlm dvc_list_category uncommitted.modified
defn dvlm dvc_list_category uncommitted.modified
defn dlt dvc_list_category not_in_cache
defn dvlt dvc_list_category not_in_cache

dvc_help() {
    dvc "$@" --help
}
export -f dvc_help
defn dvh dvc_help

dvc_to_md5() {
    if [ $# -eq 0 ]; then
        cat | yq -r '.outs[0].md5'
    else
        local spec
        for spec in "$@"; do
            spec="${spec%.dvc}.dvc"
            if [[ "$spec" == *:* ]]; then
                local cmd=(git show "$spec")
            else
                local cmd=(cat "$spec")
            fi
            num_outs="$("${cmd[@]}" | yq -r '.outs | length')"
            if [ "$num_outs" != "1" ]; then
                echo "$spec: found $num_outs outs, expected 1" >&2
                return 1
            fi
            "${cmd[@]}" | yq -r '.outs[0].md5'
        done
    fi
}
export -f dvc_to_md5
defn dv2m dvc_to_md5
defn dv5 dvc_to_md5
defn dpm dvc_to_md5

dvc_cache_dir() {
    local cache
    if [ -n "$DVC_COMPUTE_CACHE_DIR" ]; then
        # This is slow (â‰ˆ1s); skip by default
        cache="$(dvc cache dir)"
    else
        local git_root="$(git rev-parse --show-toplevel)"
        cache="$git_root/.dvc/cache"
    fi
    if [ "$1" = -r ]; then
        cache="$(realpath --relative-to=. "$cache")"
        shift
    fi
    echo "$cache"
}
export -f dvc_cache_dir
defn dcd dvc_cache_dir -r
defn dcdr dvc_cache_dir -r
defn dcda dvc_cache_dir
defn dvcd dvc_cache_dir -r
defn dvcp dvc_cache_dir -r

dvc_mdf_cache_path() {
    if [ "$1" = -c ]; then
      shift
      local cache="$1"; shift
    else
      local cmd=(dvc_cache_dir)
      if [ "$1" = -r ]; then cmd+=(-r); shift; fi
      local cache="$(${cmd[@]})"
    fi
    if [ "$1" = -r ]; then
        cache="$(realpath --relative-to=. "$cache")"
        shift
    fi
    local md5_dir="$cache/files/md5"
    for md5 in "$@"; do
        local prefix="${md5:0:2}"
        local suffix="${md5:2}"
        local local_cache_path="$md5_dir/$prefix/$suffix"
        echo "$local_cache_path"
    done
}
export -f dvc_mdf_cache_path
defn dvmc dvc_mdf_cache_path
defn dvmcp dvc_mdf_cache_path
defn m2c dvc_mdf_cache_path
defn m2cc dvc_mdf_cache_path -c
defn m2cr dvc_mdf_cache_path -r
defn dmp dvc_mdf_cache_path
defn dm5 dvc_mdf_cache_path

dvc_local_cache_path() {
    local cmd=(dvc_mdf_cache_path)
    if [ "$1" = -r ]; then
        cmd+=(-r)
        shift
    fi
    if [ $# -eq 0 ]; then
        local md5="$(dvc_to_md5)"
        "${cmd[@]}" "$md5"
    else
        for d in "$@"; do
            local d="${d%.dvc}.dvc"
            local md5="$(dvc_to_md5 "$d")"
            "${cmd[@]}" "$md5"
        done
    fi
}
export -f dvc_local_cache_path
defn dlp dvc_local_cache_path -r
defn dlpa dvc_local_cache_path
defn dlpr dvc_local_cache_path -r
defn dvlp dvc_local_cache_path -r
defn dvlpa dvc_local_cache_path

dvc_cat() {
    if [ $# -ne 1 ]; then
        echo "Usage: dvc_cat <path>" >&2
        return 1
    fi
    cat "$(dvc_local_cache_path "$1")"
}
export -f dvc_cat
defn dvct dvc_cat

dvc_local_cache_path_ref() {
    if [ $# -ne 1 ]; then
        echo "Usage: dvc_local_cache_path_ref <ref>:<path>" >&2
        return 1
    fi
    local ref="${1%:*}"
    local path="${1#*:}"
    if [ "$ref" == "$path" ]; then
        ref="HEAD"
    fi
    path="${path%.dvc}.dvc"
    path="$(git relpath "$path")"
    git show "$ref:$path" | dvc_local_cache_path
}
export -f dvc_local_cache_path_ref
defn dvlpr dvc_local_cache_path_ref
defn dpr dvc_local_cache_path_ref

dvc_size() {
    if [ $# -eq 0 ]; then
        yq '.outs | map(.size)[] as $item ireduce (0; . + $item)'
    elif [ $# -eq 1 ] ; then
        yq '.outs | map(.size)[] as $item ireduce (0; . + $item)' "$1"
    else
        for path in "$@"; do
            dvc_size "$path"
        done | jq -n '[ inputs ] | add'
    fi
}
export -f dvc_size
defn dvz dvc_size

dvc_nfiles() {
    if [ $# -eq 0 ]; then
        yq '.outs[] | .nfiles // 1'
    elif [ $# -eq 1 ] ; then
        yq '.outs[] | .nfiles // 1' "$1"
    else
        for path in "$@"; do
            dvc_nfiles "$path"
        done | jq -n '[ inputs ] | add'
    fi
}
export -f dvc_nfiles
defn dvn dvc_nfiles

dvc_size_human() {
    dvc_size "$@" | numfmt --to=iec
}
export -f dvc_size_human
defn dvzh dvc_size_human

dvc_find() {
    git ls-files | grep '.dvc$'
}
export -f dvc_find
defn dvfn dvc_find

dvc_find_suffix() {
    git ls-files | grep "$1.dvc\$"
}
export -f dvc_find_suffix
defn dvfns dvc_find_suffix

dvc_remote_root() {
    dvc remote list | \
    if [ $# -eq 1 ]; then
        grep "$1\t"
    else
        cat
    fi | \
    awk '{ print $2 }'
}
export -f dvc_remote_root
defn dvrr dvc_remote_root

dvc_remote_blob_url() {
    if [ $# -eq 2 ]; then
        remote="$1"; shift
        path="$1"; shift
    elif [ $# -eq 1 ]; then
        remote=
        path="$1"; shift
    else
        echo "Usage: $0 [remote] <path>" >&2
        return 1
    fi
    remote_root="$(dvc_remote_root $remote)"
    local_cache_path="$(dvc_local_cache_path "$path")"
    dir="$(basename "$(dirname "$local_cache_path")")"
    base="$(basename "$local_cache_path")"
    echo "$remote_root/files/md5/$dir/$base"
}
export -f dvc_remote_blob_url
defn dvrbu dvc_remote_blob_url
defn dvrp dvc_remote_blob_url

# Used by dvc-utils (https://pypi.org/project/dvc-utils)
export DVC_UTILS_CACHE_DIR=.dvc/cache
